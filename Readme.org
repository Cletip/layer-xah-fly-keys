#+TITLE: xah-fly-keys-layer


This package is intended to extend the [[https://github.com/xahlee/xah-fly-keys][xah-fly-keys]] package.
Some of these features are not in the direct philosophy of xah-fly-keys, hence the need to make a package. Each feature is an independent "extension".

* Table of content :TOC_4:
- [[#usage][Usage]]
  - [[#add-a-command-or-modify-a-key][Add a command, or modify a key]]
  - [[#automatically-change-the-mode-when-call-a-function][Automatically change the mode when call a function]]
  - [[#better-place-for-certain-shortcut][Better place for certain shortcut]]
  - [[#change-the-default-functions-of-xah-fly-keys][Change the default functions of xah-fly-keys]]
    - [[#just-with-a-setq][Just with a setq]]
    - [[#with-the-customizasion-menu][With the customizasion menu]]
  - [[#keymap-for-each-major-mode][Keymap for each major mode]]
  - [[#personal-keymap-with-spc-spc][Personal keymap with SPC SPC]]
  - [[#miscellaneous][Miscellaneous]]
    - [[#open-line-line-enter][~open-line~ line <enter>]]
    - [[#auto-save][Auto-save]]
- [[#installation][Installation]]
  - [[#use-package--straight-recommended][use-package + straight (recommended)]]
  - [[#install-manually-the-package][Install manually the package]]
  - [[#melpa][MELPA]]

* Usage

Keep in mind that for any *modified key location*, the chosen *location will be defined in dvorak*. For example, the "u" key will be "f" in azerty.
To quickly see a match, [[http://xahlee.info/emacs/misc/xah-fly-keys_tutorial.html][see here]].

This package works by extension. 
It is therefore always necessary, after downloading it, to load it:
#+begin_src emacs-lisp
  (require 'xah-fly-keys-layer)
#+end_src


And then, load the extension you want. For example :

#+begin_src emacs-lisp
  (require 'xah-fly-keys-layer-auto-mode) ;; one extension is activate
  (require 'xah-fly-keys-layer-better-place);; a second extension is activate
#+end_src

In this package, you will have to set up some variables.
*If there is no indication to change the variables before loading the extension, it means that you can load them whenever you want.*
*But, in the other case, it will be necessary to load the variables BEFORE making
(require 'layer-xah-fly-key-<name-of-the-extension>)*.
To see an example of loading a front variable, you can see this [[exemple-of-load-before][example]].

** Add a command, or modify a key

Sometimes you just want to modify / add a command to a key.
In this case, you can just call the function ~xah-fly-keys-layer-add-keys-to-keymap~.
Example if you want the tool bar mode in "SPC SPC":

#+begin_src emacs-lisp
  (xah-fly-keys-layer-add-keys-to-keymap ;; name of the function to make the modification
   'xah-fly-leader-key-map ;; the "first SPC". It's the layer after "SPC". Consult xah-fly-key for more detail
   "SPC"			 ;; where go the command
   'tool-bar-mode		 ;; name of the command
   )
#+end_src

** Automatically change the mode when call a function

Sometimes, after calling a command, you want to be in insert mode, or in command mode. This is possible by giving a list to the variables
- ~xah-fly-keys-layer-auto-command-mode~ (to activate the ~xah-fly-command-mode-activate~ after)
- ~xah-fly-keys-layer-auto-insert-mode~ (to activate the ~xah-fly-insert-mode-activate~ after)

Exemple :
#+NAME: exemple-of-load-before
#+begin_src emacs-lisp
  ;; change variables before require the extension
  ;; chose the function to activate the command-mode
  (setq xah-fly-keys-layer-auto-command-mode
        '(
          dashboard-jump-to-recents
          dashboard-jump-to-projects
          recentf-cancel-dialog
          dashboard-jump-to-bookmarks
          org-agenda-show-dashboard
          ))

  ;; chose the function to activate the insert-mode
  (setq xah-fly-keys-layer-auto-insert-mode
        '(
          execute-extended-command-for-buffer
          org-meta-return
          org-insert-heading-respect-content
          org-insert-link
          recentf-open-files
          ))

  ;; activate the extension
  (require 'xah-fly-keys-layer-auto-mode)
#+end_src

** Better place for certain shortcut

This part is about changes in the location of some features that I find relevant. 
You can either disagree or enable them.

#+begin_src emacs-lisp
  ;; change variables before require the extension
  (setq
   ;;switch place for isearch-forward and xah-forward-right-bracket
   xah-fly-keys-layer-better-place-isearch-forward t

   ;; Use your pinky less
   ;; switch xah-beginning-of-line-or-block and xah-end-of-line-or-block
   xah-fly-keys-layer-better-place-for-pinky-block t

   ;; swich xah-goto-matching-bracket, xah-forward-right-bracket and xah-backward-left-bracket to use the pinky the least
   xah-fly-keys-layer-better-place-for-pinky-parens t

   )

  ;; activate the extension
  (require 'xah-fly-keys-layer-better-place)
#+end_src

** Change the default functions of xah-fly-keys

Have you ever thought that sometimes, instead of calling the ~isearch-forward~ function, you would have preferred to call another function doing the same thing ? For example, ~consult-line~ ?

It is now possible ! 
This package has implemented variables, such as the ~layer-xah-fly-key-isearch-forward-variable~.
There are several variables of this type, whose name corresponds to this: 
~layer-xah-fly-key-default-<function-in-xah-fly-keys>-variable~
You just have to modify this variable to call another function instead of the default function ! You can even call a function that does another feature ! But, this is not recommended (xah-fly-key is usually very well done).
To see all the others variables availables, ~M-x customize-group~ and then ~xah-fly-keys-layer~.

To modify the value of theses variable, you have two possibilities : 

*** Just with a setq

An example is worth a thousand words:

#+begin_src emacs-lisp
  ;; load the extension
  (require 'xah-fly-keys-layer-better-remap)

  ;;change variables
  (setq xah-fly-key-layer--isearch-forward-variable 'consult-line
        ;;since I don't use save-buffer, I prefer this
        xah-fly-key-layer-save-buffer-variable 'avy-goto-char-2)
#+end_src



*** With the customizasion menu

Do the command ~customize-group~, choose ~xah-fly-keys-layer~, and modify the variables as desired.
Or ~customize-variable~ and the ~xah-fly-keys-layer-<name-of-the-default-function>-variable~
Do not hesitate to ask to add other functions.

** Keymap for each major mode

Sometimes you want to have a specific keymap to the mode you are using. For example, with org-mode, you would like to have the ~org-meta-return~ function very accessible, while in emacs-lisp-mode, it would be the ~eval-defun~ function.

Each mode (the modes supported in this package) already has a default keymap, but you can override them just by doing this (here, example for the ):

Example with ~org-mode-keymap~ : 

#+begin_src emacs-lisp
  ;; load the extension
  (require 'xah-fly-keys-layer-major-mode)
  ;; then, configure the place where is activate
  (setq xah-fly-keys-layer-major-mode-key (xah-fly--convert-kbd-str "i")) ;; default place
  ;; override a default keymap : 
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-keys-layer-org-mode-keymap)
   '(
     ("SPC" . org-mode-babel-keymap)

     ;; ("-" . "^") 
     ("'" . org-table-create-or-convert-from-region)
     ("," . org-mark-element)
     ("." . org-todo)
     (";" . org-toggle-narrow-to-subtree)
     ;; ("/" . "x")

     ;; ("[" . "=")
     ;; ("]" . "%")

     ;; ("=" . "ç")

     ("a" . org-export-dispatch)
     ;; ("b" . org-goto)
     ("b" . consult-org-heading) ;; mieux
     ("c" . org-insert-link)
     ("L" . org-store-link)
     ("d" . org-mode-keymap-movement)
     ("e" . org-meta-return)
     ;; ("E" . org-insert-todo-heading)
     ("f" . org-roam-ref-add)
     ("g" . org-roam-buffer-toggle)
     ("h" . vulpea-insert)
     ;; ("i" . ",")
     ("j" . org-deadline)
     ("k" . org-schedule)
     ("l" . "cp-vulpea-buffer-tags-remove-BROUILLON")
     ;; ("m" . org-insert-todo-heading)
     ("n" . vulpea-tags-add)
     ("o" . org-refile)
     ("p" . org-set-tags-command)
     ("q" . org-sort)
     ("r" . vulpea-meta-add)
     ("s" . citar-insert-citation)
     ;; ("t" . vulpea-find-backlink)
     ;; ("u" . org-capture-keymap) ;; TODO, mis dans SPC SPC
     ;; ("u" . org-capture)  ;; TODO changer

     ("v" . org-insert-todo-heading)
     ;; ("v" . cp-vulpea-meta-fait-add)
     ("w" . consult-org-roam-forward-links)
     ("x" . org-time-stamp)
     ;; ("y" . "b")
     ;; ("z" . "v")
     ))
#+end_src


You can even add just one key like this : 

#+begin_src emacs-lisp
  (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-keys-layer-org-mode-keymap "SPC" 'tool-bar-mode)
#+end_src

If you want to add a particular mode, make a pull request / open an issue for the mode in question, and propagate an arrangement of the keys for the functions. 

** Personal keymap with SPC SPC

A personal keymap is available, under the name ~xah-fly-keys-layer-personal-key-map~.

By default, the location is on ~SPC SPC~.
You can change this position with the "xah-fly-keys-layer-add-keys-to-keymap" function, for example like this: 

#+begin_src emacs-lisp
(xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-leader-key-map "n" 'xah-fly-keys-layer-personal-key-map)
#+end_src


To use ~xah-fly-keys-layer-personal-key-map~, simply put this in :
#+begin_src emacs-lisp
  ;; load the extension
  (require 'xah-fly-keys-layer-personal-keymap)
  ;; here, you define your command with each key.
  ;; for this example, just "RET" is used, and the key call the function "tool-bar-mode"
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-keys-layer-personal-key-map)
   '(("RET" . tool-bar-mode)
     ;; ("<up>"  . nil)
     ;; ("<down>"  . nil)
     ;; ("'" . nil)
     ;; ("," . nil)
     ;; ("." . nil)
     ;; ("0" . nil)
     ;; ("1" . nil)
     ;; ("2" . nil)
     ;; ("3" . nil)
     ;; ("4" . nil)
     ;; ("5" . nil)
     ;; ("6" . nil)
     ;; ("7" . nil)
     ;; ("8" . nil)
     ;; ("9" . nil)

     ;; ("a" . nil)
     ;; ("b" . nil)
     ;; ("c" . nil)
     ;; ("d" . nil)
     ;; ("d" . nil)
     ;; ("d" . nil)
     ;; ("e" . nil)
     ;; ("f" . nil)
     ;; ("g" . nil)
     ;; ("h" . nil)
     ;; ("i" . nil)
     ;; ("j" . nil)
     ;; ("k" . nil)
     ;; ("l" . nil)
     ;; ("m" . nil)
     ;; ("n" . nil)
     ;; ("o" . nil)
     ;; ("p" . nil)
     ;; ("q" . nil)
     ;; ("r" . nil)
     ;; ("s" . nil)
     ;; ("t" . nil)
     ;; ("u" . nil)
     ;; ("v" . nil)
     ;; ("w" . nil)
     ;; ("x" . nil)
     ;; ("y" . nil)
     ;; ("z" . nil)
     ))

#+end_src

** Miscellaneous

*** ~open-line~ line <enter>

Modify the key for ~open-line~ in xah-fly-keys to do exactly the same job of <enter> in the right context.

#+begin_src emacs-lisp
  ;; change variable before require the extension
  (setq xah-fly-keys-layer-misc-enter-open-line t)
  (require 'xah-fly-keys-layer-misc)
#+end_src

*** Auto-save

#+begin_src emacs-lisp
  ;; change variable before require the extension
  (setq xah-fly-keys-layer-misc-autosave-exclude-mode '(gpg)) ;;list of mode to exclude for the autosave
  (setq xah-fly-keys-layer-misc-autosave t)
  (require 'xah-fly-keys-layer-misc)
#+end_src

* Installation

*You need to install and load xah-fly-keys first !*
Like that (use-package + straight) : 

#+begin_src emacs-lisp
  (use-package xah-fly-keys
    :straight (xah-fly-keys
               :type git
               :host github
               :repo "xahlee/xah-fly-keys"))
#+end_src

If you install manually, pay attention to install the last version of xah-fly-keys !

** use-package + straight (recommended)

#+begin_src emacs-lisp
  (use-package xah-fly-keys-layer
    :straight (xah-fly-keys-layer :type git :host github :repo "Cletip/xah-fly-keys-layer"))
#+end_src

** Install manually the package

Refer to this : [[http://xahlee.info/emacs/emacs/emacs_installing_packages.html#:~:text=Load%20the%20File%20Manually&text=To%20use%20the%20package,%20all,the%20command%20in%20the%20package.][here]].

** MELPA

Not available yet.

