#+TITLE: xah-fly-keys-layer


This package is intended to extend the [[https://github.com/xahlee/xah-fly-keys][xah-fly-keys]] package.
Some of these features are not in the direct philosophy of xah-fly-keys, hence the need to make a package.

* Table of content :TOC:
- [[#usage][Usage]]
  - [[#add-or-modify-a-key-to-a-special-position][Add or modify a key to a special position]]
  - [[#change-the-default-functions-of-xah-fly-keys][Change the default functions of xah-fly-keys]]
  - [[#automatically-change-the-mode-when-call-a-function][Automatically change the mode when call a function]]
  - [[#keymap-for-each-major-mode][Keymap for each major mode]]
  - [[#personal-keymap-with-spc-spc][Personal keymap with SPC SPC]]
  - [[#better-place-for-certain-shortcut][Better place for certain shortcut]]
  - [[#misc][Misc]]
- [[#installation][Installation]]
  - [[#straight-recommended][Straight (recommended)]]
  - [[#install-manually-the-package][Install manually the package]]
  - [[#melpa][MELPA]]

* Usage

Keep in mind that for any modified key location, the chosen location will be defined in dvorak. For example, the "u" key will be "f" in azerty.
To quickly see a match : [[http://xahlee.info/emacs/misc/xah-fly-keys_tutorial.html][see here]].

Some variables must be loaded before the extensions, others after. The indications for each extension will be indicated

** Add or modify a key to a special position

Sometimes you just want to modify / add a command. In this case you just call the function "xah-fly-keys-layer-add-keys-to-keymap". 
Example: 

#+begin_src emacs-lisp
   (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-leader-key-map "SPC" 'xah-fly-keys-layer-personal-key-map)
#+end_src

** Change the default functions of xah-fly-keys

Have you ever thought that sometimes, instead of calling the "isearch-forward" function, you would have preferred to call another function doing the same thing ? For example, consult-line ?

It is now possible ! 
This package has implemented variables, such as the "layer-xah-fly-key-isearch-forward-variable".
There are several variables of this type, whose name corresponds to this: 
"layer-xah-fly-key-default-function-in-xah-fly-keys-variable"
You just have to modify this variable to call another function instead of the default function !
To see all the others variables availables, see
customize-group
xah-fly-keys-layer

To modify the value of theses variable, you have two possibilities : 

*** Just with a setq

An example is worth a thousand words:

If you want the "consult-line" function instead of isearch, just do it like this : 

#+begin_src emacs-lisp
  (setq layer-xah-fly-key-isearch-forward-variable 'consult-line)
#+end_src


*** With the customizasion menu

Do the command "customize-group", choose "xah-fly-keys-layer", and modify the variables as desired. 
Do not hesitate to ask to add other functions.

** Automatically change the mode when call a function

Sometimes, after calling a command, you want to be in insert mode, or in command mode. This is possible by giving a list to the variables
- xah-fly-keys-layer-auto-command-mode (to activate the command mode after)
- xah-fly-keys-layer-auto-insert-mode (to activate the insert mode after)


Exemple : 
#+begin_src emacs-lisp

  ;; activate the extension
  (require 'xah-fly-keys-layer-auto-mode)

  ;; chose the function
  (setq xah-fly-keys-layer-auto-command-mode
        '(
          dashboard-jump-to-recents
          dashboard-jump-to-projects
          recentf-cancel-dialog
          dashboard-jump-to-bookmarks
          org-agenda-show-dashboard
          ))
  ;; load the modification
  (xah-fly-keys-layer-auto-command-mode-activate)

  ;; chose the function
  (setq xah-fly-keys-layer-auto-insert-mode
        '(
          execute-extended-command-for-buffer
          org-meta-return
          org-insert-heading-respect-content
          org-insert-link
          recentf-open-files
          ))
  ;; load the modification
  (xah-fly-keys-layer-auto-insert-mode-activate)
#+end_src

** Keymap for each major mode

Sometimes you want to have a specific keymap to the mode you are using. For example, with org-mode, you would like to have the "org-meta-return" function, while in emacs-lisp-mode, it would be the "eval-defun" function.

For this purpose you just need two things: which mode will take new keys, and what are those new keys ?

Each mode (the modes supported in this package) already has a default keymap, but you can override them just by doing this (here, example for the "org-mode-keymap"):

#+begin_src emacs-lisp
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-keys-layer-org-mode-keymap)
   '(
     ("SPC" . org-mode-babel-keymap)

     ;; ("-" . "^") 
     ("'" . org-table-create-or-convert-from-region)
     ("," . org-mark-element)
     ("." . org-todo)
     (";" . org-toggle-narrow-to-subtree)
     ;; ("/" . "x")

     ;; ("[" . "=")
     ;; ("]" . "%")

     ;; ("=" . "ç")

     ("a" . org-export-dispatch)
     ;; ("b" . org-goto)
     ("b" . consult-org-heading) ;; mieux
     ("c" . org-insert-link)
     ("L" . org-store-link)
     ("d" . org-mode-keymap-movement)
     ("e" . org-meta-return)
     ;; ("E" . org-insert-todo-heading)
     ("f" . org-roam-ref-add)
     ("g" . org-roam-buffer-toggle)
     ("h" . vulpea-insert)
     ;; ("i" . ",")
     ("j" . org-deadline)
     ("k" . org-schedule)
     ("l" . "cp-vulpea-buffer-tags-remove-BROUILLON")
     ;; ("m" . org-insert-todo-heading)
     ("n" . vulpea-tags-add)
     ("o" . org-refile)
     ("p" . org-set-tags-command)
     ("q" . org-sort)
     ("r" . vulpea-meta-add)
     ("s" . citar-insert-citation)
     ;; ("t" . vulpea-find-backlink)
     ;; ("u" . org-capture-keymap) ;; TODO, mis dans SPC SPC
     ;; ("u" . org-capture)  ;; TODO changer
   
     ("v" . org-insert-todo-heading)
     ;; ("v" . cp-vulpea-meta-fait-add)
     ("w" . consult-org-roam-forward-links)
     ("x" . org-time-stamp)
     ;; ("y" . "b")
     ;; ("z" . "v")
     ))
#+end_src

If you want to add a particular mode, make a pull request for the mode in question, and propagate an arrangement of the keys for the functions. 

** Personal keymap with SPC SPC

A "personal" keymap is available, under the name "xah-fly-keys-layer-personal-key-map". 
A default patern is available, but it may not be suitable for your needs.

To use it :

#+begin_src emacs-lisp
  ;; load the extension
  (require 'xah-fly-keys-layer-personal-keymap)
#+end_src

To overidde the default patern, you just have to do this: 

#+begin_src emacs-lisp

  ;; load the extension
  (require 'xah-fly-keys-layer-personal-keymap)

  ;; here, you define your command with each key.
  ;; for this example, just "RET" is used, and the key call the function "tool-bar-mode"
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-keys-layer-personal-key-map)
   '(("RET" . tool-bar-mode)
     ;; ("<up>"  . nil)
     ;; ("<down>"  . nil)
     ;; ("'" . nil)
     ;; ("," . nil)
     ;; ("." . nil)
     ;; ("0" . nil)
     ;; ("1" . nil)
     ;; ("2" . nil)
     ;; ("3" . nil)
     ;; ("4" . nil)
     ;; ("5" . nil)
     ;; ("6" . nil)
     ;; ("7" . nil)
     ;; ("8" . nil)
     ;; ("9" . nil)

     ;; ("a" . nil)
     ;; ("b" . nil)
     ;; ("c" . nil)
     ;; ("d" . nil)
     ;; ("d" . nil)
     ;; ("d" . nil)
     ;; ("e" . nil)
     ;; ("f" . nil)
     ;; ("g" . nil)
     ;; ("h" . nil)
     ;; ("i" . nil)
     ;; ("j" . nil)
     ;; ("k" . nil)
     ;; ("l" . nil)
     ;; ("m" . nil)
     ;; ("n" . nil)
     ;; ("o" . nil)
     ;; ("p" . nil)
     ;; ("q" . nil)
     ;; ("r" . nil)
     ;; ("s" . nil)
     ;; ("t" . nil)
     ;; ("u" . nil)
     ;; ("v" . nil)
     ;; ("w" . nil)
     ;; ("x" . nil)
     ;; ("y" . nil)
     ;; ("z" . nil)
     ))


#+end_src

Basically the location is on "SPC SPC".
You can change this position with the "xah-fly-keys-layer-add-keys-to-keymap" function, for example like this: 

#+begin_src emacs-lisp
(xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-leader-key-map "n" 'xah-fly-keys-layer-personal-key-map)
#+end_src

** Better place for certain shortcut

This part is about changes in the location of some features that I find relevant. 
You can either disagree or enable them.
To activate the changes, you have to "activate" a variable before loading layer-xah-fly-keys".
Like that :

#+begin_src emacs-lisp
  ;; pay attention to the "init"
  (use-package xah-fly-keys-layer
    :straight (xah-fly-keys-layer
               :type git
               :host github
               :repo "Cletip/xah-fly-keys-layer")
    :init
    ;; before loading
    (setq xah-fly-keys-layer-change-isearch-forward t)
    (setq xah-fly-keys-layer-change-X t)
    ;; etc
    :config
    ;; after loading
    )
#+end_src

(Or make the modification and reload xah-fly-keys-layer)

*** Isearch-forward

** Misc

*** Change

* Installation

You need to install and load xah-fly-keys first !
Like that : 
#+begin_src emacs-lisp
  (use-package xah-fly-keys
    :straight (xah-fly-keys
               :type git
               :host github
               :repo "xahlee/xah-fly-keys")
    :config
    ;;rest of the config here)
#+end_src

If you install manually, pay attention to install the last version of xah-fly-keys !

** Straight (recommended)



#+begin_src emacs-lisp
  (use-package xah-fly-keys-layer
    :straight (xah-fly-keys-layer :type git :host github :repo "Cletip/xah-fly-keys-layer"))
#+end_src

** Install manually the package

Refer to this : [[http://xahlee.info/emacs/emacs/emacs_installing_packages.html#:~:text=Load%20the%20File%20Manually&text=To%20use%20the%20package,%20all,the%20command%20in%20the%20package.][here]].

** MELPA

Not available yet.

